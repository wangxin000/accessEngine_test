#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from IFaaService import IFaaService
from IFaaService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string updateBlacklist(string json)')
  print('  string featureExtract(string json)')
  print('  string featureCompare(string json)')
  print('  string startTask(string info)')
  print('  string stopTask(string info)')
  print('  string featureExtract_v3(string json)')
  print('  string featureCompare_v3(string json)')
  print('  string analyzeTask(string json)')
  print('  string stopAnalyzeTask(string json)')
  print('  string openPlatformAccess(string json)')
  print('  string closePlatformAccess(string json)')
  print('  string taskAccelerate(string json)')
  print('  string addFilterObject(string json)')
  print('  string delFilterObject(string json)')
  print('  string filterObjectCtrl(string json)')
  print('  string crowdDensityDetect(string json)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = IFaaService.Client(protocol)
transport.open()

if cmd == 'updateBlacklist':
  if len(args) != 1:
    print('updateBlacklist requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateBlacklist(args[0],))

elif cmd == 'featureExtract':
  if len(args) != 1:
    print('featureExtract requires 1 args')
    sys.exit(1)
  pp.pprint(client.featureExtract(args[0],))

elif cmd == 'featureCompare':
  if len(args) != 1:
    print('featureCompare requires 1 args')
    sys.exit(1)
  pp.pprint(client.featureCompare(args[0],))

elif cmd == 'startTask':
  if len(args) != 1:
    print('startTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.startTask(args[0],))

elif cmd == 'stopTask':
  if len(args) != 1:
    print('stopTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.stopTask(args[0],))

elif cmd == 'featureExtract_v3':
  if len(args) != 1:
    print('featureExtract_v3 requires 1 args')
    sys.exit(1)
  pp.pprint(client.featureExtract_v3(args[0],))

elif cmd == 'featureCompare_v3':
  if len(args) != 1:
    print('featureCompare_v3 requires 1 args')
    sys.exit(1)
  pp.pprint(client.featureCompare_v3(args[0],))

elif cmd == 'analyzeTask':
  if len(args) != 1:
    print('analyzeTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.analyzeTask(args[0],))

elif cmd == 'stopAnalyzeTask':
  if len(args) != 1:
    print('stopAnalyzeTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.stopAnalyzeTask(args[0],))

elif cmd == 'openPlatformAccess':
  if len(args) != 1:
    print('openPlatformAccess requires 1 args')
    sys.exit(1)
  pp.pprint(client.openPlatformAccess(args[0],))

elif cmd == 'closePlatformAccess':
  if len(args) != 1:
    print('closePlatformAccess requires 1 args')
    sys.exit(1)
  pp.pprint(client.closePlatformAccess(args[0],))

elif cmd == 'taskAccelerate':
  if len(args) != 1:
    print('taskAccelerate requires 1 args')
    sys.exit(1)
  pp.pprint(client.taskAccelerate(args[0],))

elif cmd == 'addFilterObject':
  if len(args) != 1:
    print('addFilterObject requires 1 args')
    sys.exit(1)
  pp.pprint(client.addFilterObject(args[0],))

elif cmd == 'delFilterObject':
  if len(args) != 1:
    print('delFilterObject requires 1 args')
    sys.exit(1)
  pp.pprint(client.delFilterObject(args[0],))

elif cmd == 'filterObjectCtrl':
  if len(args) != 1:
    print('filterObjectCtrl requires 1 args')
    sys.exit(1)
  pp.pprint(client.filterObjectCtrl(args[0],))

elif cmd == 'crowdDensityDetect':
  if len(args) != 1:
    print('crowdDensityDetect requires 1 args')
    sys.exit(1)
  pp.pprint(client.crowdDensityDetect(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
